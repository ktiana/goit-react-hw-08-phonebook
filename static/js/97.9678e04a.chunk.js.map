{"version":3,"file":"static/js/97.9678e04a.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/ContactList.module.css?ae34","components/ContactsList/ContactsList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/FilterContacts/FilterContacts.module.css?4cf4","components/FilterContacts/FilterContacts.jsx","webpack://goit-react-hw-08-phonebook/./src/Pages/ContactsPage/ContactsPage.module.css?6772","Pages/ContactsPage/ContactsPage.jsx","redux/contacts/selectors.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"input\":\"ContactForm_input__Bl93P\",\"btn\":\"ContactForm_btn__wll+u\"};","import { React, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { nanoid } from 'nanoid';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts, selectIsLoading } from 'redux/contacts/selectors';\nimport css from './ContactForm.module.css';\nimport { toast } from 'react-toastify';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  const onInputChange = event => {\n    const { name, value } = event.target;\n    if (name === 'name') setName(value);\n    if (name === 'number') setNumber(value);\n  };\n\n  const onSubmitForm = event => {\n    event.preventDefault();\n\n    const isInContact = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (isInContact) {\n      toast.warn(`${name} has already exists`, {\n        position: 'top-right',\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: false,\n        draggable: true,\n        progress: undefined,\n        theme: 'light',\n      });\n      return;\n    }\n\n    dispatch(\n      addContact({\n        name: name.trim(),\n        number: number,\n        id: nanoid(10),\n      })\n    );\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className={css.form}>\n      <form onSubmit={onSubmitForm} className={css.contact_form}>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan, Aragorn son of Aratorn\"\n            value={name}\n            required\n            onChange={onInputChange}\n            className={css.input}\n          />\n        </label>\n        <label>\n          Telephone\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={onInputChange}\n            className={css.input}\n          />\n        </label>\n        <button type=\"submit\" className={css.btn} disabled={isLoading}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__3daws\",\"list_item\":\"ContactList_list_item__918Mq\",\"list_button\":\"ContactList_list_button__U925W\"};","import { useDispatch, useSelector } from 'react-redux';\n\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  selectIsLoading,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\nimport css from './ContactList.module.css';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectVisibleContacts);\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <ul className={css.list}>\n      {contacts.map(el => {\n        return (\n          <li key={el.id} className={css.list_item}>\n            {el.name}: <span>{el.number}</span>\n            <button\n              type=\"button\"\n              onClick={() => {\n                dispatch(deleteContact(el.id));\n              }}\n              className={css.list_button}\n              disabled={isLoading}\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"FilterContacts_contacts__C4Dti\"};","import { useDispatch, useSelector } from 'react-redux';\n\nimport { filterContact } from 'redux/contacts/filterSlice';\nimport { selectFilterValue } from 'redux/contacts/selectors';\nimport css from './FilterContacts.module.css';\n\nexport const FilterContacts = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilterValue);\n  return (\n    <div className={css.contacts}>\n      <h2>Contacts</h2>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={event => {\n          dispatch(filterContact(event.target.value));\n        }}\n        placeholder=\"Search contacts\"\n      />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"ContactsPage_loader__7d03u\"};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { FilterContacts } from 'components/FilterContacts/FilterContacts';\nimport { HashLoader } from 'react-spinners';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport css from './ContactsPage.module.css';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <ContactForm />\n      <FilterContacts />\n      {isLoading && !error ? (\n        <div className={css.loader}>\n          <br />\n          <HashLoader color=\"#36d7b7\" size={150} />\n        </div>\n      ) : (\n        <ContactsList />\n      )}\n    </div>\n  );\n};\n\nexport default ContactsPage;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterValue = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  (contacts, filter) => {\n    if (!contacts) return;\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","useState","name","setName","number","setNumber","contacts","useSelector","selectContacts","dispatch","useDispatch","isLoading","selectIsLoading","onInputChange","event","target","value","className","css","onSubmit","preventDefault","some","contact","toLowerCase","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","addContact","trim","type","pattern","title","required","onChange","disabled","ContactsList","selectVisibleContacts","map","el","onClick","deleteContact","FilterContacts","filter","selectFilterValue","filterContact","placeholder","error","selectError","useEffect","fetchContacts","HashLoader","color","state","items","createSelector","includes"],"sourceRoot":""}